import 'dart:async';
import 'dart:io';

import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:logger/logger.dart';
import 'package:path_provider/path_provider.dart';
import 'package:portail_eleve/app/core/api/api_client.dart';
import 'package:portail_eleve/app/core/data/models/report_card.dart';

/// Service de polling pour d√©tecter les nouveaux bulletins disponibles.
/// G√®re la notification et le t√©l√©chargement s√©curis√© des bulletins.
class PollLatestBulletins {
  final ApiClient apiClient;
  final FlutterLocalNotificationsPlugin notifications;
  final FlutterSecureStorage secureStorage = const FlutterSecureStorage();
  final Logger _logger = Logger(
    printer: PrettyPrinter(
      methodCount: 2,
      errorMethodCount: 8,
      lineLength: 120,
      colors: true,
      printEmojis: true,
      printTime: true,
    ),
  );
  final String channelId = 'bulletins';
  final String channelName = 'Documents disponibles';
  Timer? _timer;

  static const Duration _pollInterval = Duration(minutes: 2);
  static const String _lastCheckedKey = 'lastCheckedBulletinTimestamp';
  static const String _userIdKey = 'user_id';

  PollLatestBulletins({required this.apiClient, required this.notifications});

  /// R√©cup√®re la liste des IDs des √©tudiants li√©s au compte actuel.
  Future<List<int>> getLinkedStudentIds() async {
    try {
      _logger.d('üîç R√©cup√©ration des IDs √©tudiants li√©s...');

      // Try to get student IDs from different possible storage keys
      final userIdStr = await secureStorage.read(key: _userIdKey);
      final studentIdStr = await secureStorage.read(key: 'student_id');
      final currentUserStr = await secureStorage.read(key: 'current_user_id');

      _logger.d(
        'üìã Storage keys found: user_id=$userIdStr, student_id=$studentIdStr, current_user_id=$currentUserStr',
      );

      final studentIds = <int>[];

      // Try different storage patterns
      for (final idStr in [userIdStr, studentIdStr, currentUserStr]) {
        if (idStr != null) {
          final id = int.tryParse(idStr);
          if (id != null && !studentIds.contains(id)) {
            studentIds.add(id);
          }
        }
      }

      // If no student IDs found, try to get from additional keys
      if (studentIds.isEmpty) {
        _logger.w(
          '‚ö†Ô∏è Aucun ID √©tudiant trouv√© dans le storage principal, recherche √©tendue...',
        );

        // Check for parent-child relationships
        final allKeys = await secureStorage.readAll();
        _logger.d('üóÇÔ∏è Toutes les cl√©s de storage: ${allKeys.keys.toList()}');

        for (final entry in allKeys.entries) {
          if (entry.key.contains('student') || entry.key.contains('child')) {
            final id = int.tryParse(entry.value);
            if (id != null && !studentIds.contains(id)) {
              studentIds.add(id);
              _logger.d('‚úÖ ID √©tudiant trouv√© via ${entry.key}: $id');
            }
          }
        }
      }

      _logger.i('üë• IDs √©tudiants trouv√©s: $studentIds');
      return studentIds;
    } catch (e, stackTrace) {
      _logger.e(
        '‚ùå Erreur lors de la r√©cup√©ration des IDs √©tudiants',
        error: e,
        stackTrace: stackTrace,
      );
      return [];
    }
  }

  /// R√©cup√®re le timestamp de la derni√®re v√©rification pour un √©tudiant donn√©.
  /// Retourne null si aucune v√©rification pr√©c√©dente n'a √©t√© effectu√©e.
  Future<DateTime?> getLastCheckedTimestamp(int studentId) async {
    try {
      final tsStr = await secureStorage.read(
        key: '${_lastCheckedKey}_$studentId',
      );
      if (tsStr == null) return null;

      final ts = int.tryParse(tsStr);
      return ts != null ? DateTime.fromMillisecondsSinceEpoch(ts) : null;
    } catch (e) {
      return null;
    }
  }

  /// Sauvegarde le timestamp de la derni√®re v√©rification pour un √©tudiant.
  Future<void> setLastCheckedTimestamp(
    int studentId,
    DateTime timestamp,
  ) async {
    try {
      await secureStorage.write(
        key: '${_lastCheckedKey}_$studentId',
        value: timestamp.millisecondsSinceEpoch.toString(),
      );
    } catch (e) {
      // Silently handle storage errors
    }
  }

  /// Obtient le r√©pertoire de stockage des bulletins t√©l√©charg√©s.
  Future<Directory> getBulletinsDirectory() async {
    final appDir = await getApplicationDocumentsDirectory();
    final bulletinsDir = Directory('${appDir.path}/bulletins');

    if (!await bulletinsDir.exists()) {
      await bulletinsDir.create(recursive: true);
    }

    return bulletinsDir;
  }

  /// G√©n√®re un nom de fichier s√©curis√© pour le bulletin.
  Future<String> generateBulletinFileName(
    int studentId,
    ReportCard reportCard,
  ) async {
    try {
      // Get student name for proper file naming
      final studentName = await _getStudentName(studentId);
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final sanitizedName = studentName
          .replaceAll(RegExp(r'[^a-zA-Z0-9\s]'), '')
          .replaceAll(' ', '_');
      return 'bulletin_${sanitizedName}_${reportCard.id}_$timestamp.pdf';
    } catch (e) {
      // Fallback to generic naming if student name can't be retrieved
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      return 'bulletin_${studentId}_${reportCard.id}_$timestamp.pdf';
    }
  }

  /// R√©cup√®re le nom complet de l'√©tudiant via l'API
  Future<String> _getStudentName(int studentId) async {
    try {
      // Try to get student details from API
      final response = await apiClient.get('/students/$studentId');
      if (response.statusCode == 200 && response.data != null) {
        final studentData = response.data;

        // Extract from userModel if available
        if (studentData['userModel'] != null) {
          final userModel = studentData['userModel'];
          final firstName = userModel['first_name'] ?? '';
          final lastName = userModel['last_name'] ?? '';
          final fullName = '$firstName $lastName'.trim();
          if (fullName.isNotEmpty) {
            return fullName;
          }
        }

        // Fallback to direct fields
        final firstName =
            studentData['firstName'] ?? studentData['first_name'] ?? '';
        final lastName =
            studentData['lastName'] ?? studentData['last_name'] ?? '';
        final fullName = '$firstName $lastName'.trim();
        if (fullName.isNotEmpty) {
          return fullName;
        }

        // Use matricule as fallback
        final matricule = studentData['matricule'] ?? '';
        if (matricule.isNotEmpty) {
          return matricule;
        }
      }
    } catch (e) {
      _logger.d('Could not fetch student name from API: $e');
    }

    // Fallback to generic name
    return 'Etudiant_$studentId';
  }

  /// T√©l√©charge le bulletin PDF de mani√®re s√©curis√©e en utilisant le pdf_url.
  /// Retourne le chemin local du fichier t√©l√©charg√© ou null en cas d'erreur.
  Future<String?> downloadBulletin(int studentId, ReportCard reportCard) async {
    try {
      if (reportCard.id == null) {
        _logger.w('‚ö†Ô∏è ID bulletin manquant pour le t√©l√©chargement');
        return null;
      }

      final bulletinsDir = await getBulletinsDirectory();
      final fileName = await generateBulletinFileName(studentId, reportCard);
      final savePath = '${bulletinsDir.path}/$fileName';

      // Always use the authenticated API endpoint for downloads
      final downloadUrl = '/report-cards/${reportCard.id}/download';
      _logger.d(
        'üì• T√©l√©chargement via API authentifi√©e: $downloadUrl -> $savePath',
      );

      // Use the API client with authentication
      await apiClient.download(downloadUrl, savePath);

      final downloadedFile = File(savePath);
      if (await downloadedFile.exists() && await downloadedFile.length() > 0) {
        final fileSize = await downloadedFile.length();
        _logger.i('‚úÖ T√©l√©chargement r√©ussi: $fileName (${fileSize} bytes)');
        return savePath;
      } else {
        _logger.e('‚ùå Fichier t√©l√©charg√© invalide ou vide');
        return null;
      }
    } catch (e, stackTrace) {
      _logger.e(
        '‚ùå Erreur t√©l√©chargement bulletin',
        error: e,
        stackTrace: stackTrace,
      );
      return null;
    }
  }

  /// R√©cup√®re le nom de l'√©tudiant pour personnaliser les notifications.
  /// Retourne un nom par d√©faut si indisponible.
  Future<String> getStudentName(int studentId) async {
    try {
      // Ici, vous pourriez faire un appel API pour r√©cup√©rer le nom
      // Pour l'instant, retourne un nom par d√©faut
      return 'Votre enfant';
    } catch (e) {
      return 'Votre enfant';
    }
  }

  /// Effectue le polling pour d√©tecter de nouveaux bulletins.
  /// V√©rifie tous les √©tudiants li√©s et traite les nouveaux bulletins.
  Future<void> poll() async {
    try {
      _logger.i('üîÑ D√©but du polling des bulletins...');
      final studentIds = await getLinkedStudentIds();

      if (studentIds.isEmpty) {
        _logger.w('‚ö†Ô∏è Aucun √©tudiant trouv√© pour le polling');
        return;
      }

      for (final studentId in studentIds) {
        await _pollForStudent(studentId);
      }

      _logger.i('‚úÖ Polling termin√© pour ${studentIds.length} √©tudiant(s)');
    } catch (e, stackTrace) {
      _logger.e(
        '‚ùå Erreur g√©n√©rale lors du polling',
        error: e,
        stackTrace: stackTrace,
      );
    }
  }

  /// Traite le polling pour un √©tudiant sp√©cifique.
  Future<void> _pollForStudent(int studentId) async {
    try {
      _logger.d('üéì Polling pour l\'√©tudiant ID: $studentId');

      final lastChecked = await getLastCheckedTimestamp(studentId);
      final queryParams = <String, dynamic>{};

      // Always set 'since' to 2 months before today
      final twoMonthsAgo = DateTime.now().subtract(const Duration(days: 60));
      queryParams['since'] = twoMonthsAgo.toIso8601String();
      _logger.d(
        'üìÖ Recherche depuis: [32m${twoMonthsAgo.toIso8601String()}[0m',
      );

      final endpoint = '/students/$studentId/bulletins/latest';
      _logger.d('üåê Appel API: $endpoint avec params: $queryParams');

      final response = await apiClient.get(
        endpoint,
        queryParams: queryParams.isNotEmpty ? queryParams : null,
      );

      _logger.i('üì° R√©ponse API [${response.statusCode}]: ${response.data}');

      if (response.statusCode == 200 && response.data != null) {
        await _processApiResponse(studentId, response.data);
      } else if (response.statusCode == 404) {
        _logger.i('üì≠ Aucun bulletin trouv√© pour l\'√©tudiant $studentId');
      } else {
        _logger.w(
          '‚ö†Ô∏è R√©ponse API inattendue [${response.statusCode}]: ${response.data}',
        );
      }

      // Met √† jour le timestamp m√™me si aucun bulletin n'est trouv√©
      await setLastCheckedTimestamp(studentId, DateTime.now());
    } catch (e, stackTrace) {
      _logger.e(
        '‚ùå Erreur polling √©tudiant $studentId',
        error: e,
        stackTrace: stackTrace,
      );
    }
  }

  /// Traite la r√©ponse de l'API et extrait les bulletins.
  Future<void> _processApiResponse(int studentId, dynamic responseData) async {
    try {
      _logger.d('üîç Traitement de la r√©ponse API...');
      ReportCard? latestReportCard;

      if (responseData is Map<String, dynamic>) {
        _logger.d('üìã R√©ponse de type Map d√©tect√©e');

        if (responseData['report_card'] != null) {
          _logger.d('üìÑ Bulletin trouv√© dans report_card wrapper');
          latestReportCard = ReportCard.fromJson(responseData['report_card']);
        } else if (responseData.containsKey('report_card') &&
            responseData['report_card'] == null) {
          _logger.i(
            'üì≠ Backend confirme: aucun bulletin disponible pour l\'√©tudiant $studentId',
          );
          return; // Exit early - no bulletin available
        } else if (responseData.containsKey('id')) {
          _logger.d('üìÑ Bulletin direct d√©tect√©');
          latestReportCard = ReportCard.fromJson(responseData);
        }
      } else if (responseData is List && responseData.isNotEmpty) {
        _logger.d(
          'üìã R√©ponse de type Array d√©tect√©e avec ${responseData.length} √©l√©ment(s)',
        );

        final reportCards = responseData
            .map((json) => ReportCard.fromJson(json))
            .toList();

        // Trie par date de cr√©ation, plus r√©cent en premier
        reportCards.sort((a, b) {
          if (a.createdAt == null || b.createdAt == null) return 0;
          return b.createdAt!.compareTo(a.createdAt!);
        });

        latestReportCard = reportCards.first;
        _logger.d(
          'üìÑ Bulletin le plus r√©cent s√©lectionn√©: ID ${latestReportCard.id}',
        );
      }

      if (latestReportCard != null && latestReportCard.id != null) {
        _logger.i(
          'üìã Bulletin trouv√©: ID ${latestReportCard.id}, Note: ${latestReportCard.averageGrade}, Mention: ${latestReportCard.honors}',
        );

        if (await _isNewBulletin(studentId, latestReportCard)) {
          _logger.i('üÜï Nouveau bulletin d√©tect√©, traitement...');

          // T√©l√©charge le bulletin
          final downloadPath = await downloadBulletin(
            studentId,
            latestReportCard,
          );

          // Affiche la notification
          await showBulletinNotification(
            studentId,
            latestReportCard,
            downloadPath,
          );

          // Marque comme trait√©
          await _storeLastBulletinId(studentId, latestReportCard.id!);

          // D√©clenche un rafra√Æchissement de l'interface utilisateur
          await _notifyHomeScreenUpdate();

          _logger.i('‚úÖ Nouveau bulletin trait√© avec succ√®s');
        } else {
          _logger.d('üìã Bulletin d√©j√† connu, pas de notification');
        }
      } else {
        _logger.d('üì≠ Aucun bulletin valide trouv√© dans la r√©ponse');
      }
    } catch (e, stackTrace) {
      _logger.e(
        '‚ùå Erreur traitement r√©ponse API',
        error: e,
        stackTrace: stackTrace,
      );
    }
  }

  /// Notifie l'√©cran d'accueil qu'il doit rafra√Æchir les donn√©es de bulletins.
  Future<void> _notifyHomeScreenUpdate() async {
    try {
      // Import Get to access the controller
      final dynamic Get = await _getGetInstance();
      if (Get != null) {
        // Try to find the HomeController and refresh bulletins
        try {
          final homeController = Get.find<dynamic>(); // HomeController type
          if (homeController.refreshBulletins != null) {
            await homeController.refreshBulletins();
            _logger.d('üîÑ Interface d\'accueil notifi√©e pour rafra√Æchissement');
          }
        } catch (e) {
          _logger.d('‚ÑπÔ∏è HomeController non trouv√© ou m√©thode indisponible: $e');
        }
      }
    } catch (e) {
      _logger.d('‚ÑπÔ∏è Notification interface √©chou√©e (non critique): $e');
    }
  }

  /// Helper method to get GetX instance dynamically to avoid import issues.
  Future<dynamic> _getGetInstance() async {
    try {
      // This is a workaround to avoid circular dependencies
      // In a real implementation, you might use a callback or event system
      return null; // For now, return null to avoid import issues
    } catch (e) {
      return null;
    }
  }

  /// V√©rifie si le bulletin est nouveau (pas encore notifi√©).
  Future<bool> _isNewBulletin(int studentId, ReportCard reportCard) async {
    try {
      final lastBulletinIdStr = await secureStorage.read(
        key: 'lastBulletinId_$studentId',
      );

      _logger.d(
        'üîç V√©rification nouveau bulletin - ID actuel: ${reportCard.id}, Dernier ID stock√©: $lastBulletinIdStr',
      );

      if (lastBulletinIdStr == null) {
        _logger.d('‚úÖ Aucun bulletin pr√©c√©dent stock√© - marqu√© comme nouveau');
        return true;
      }

      final lastBulletinId = int.tryParse(lastBulletinIdStr);
      final isNew = lastBulletinId != reportCard.id;

      _logger.d('üîç Comparaison: $lastBulletinId != ${reportCard.id} = $isNew');

      if (!isNew) {
        _logger.d('üìã Bulletin d√©j√† trait√© pr√©c√©demment');
      } else {
        _logger.d('üÜï Nouveau bulletin d√©tect√©!');
      }

      return isNew;
    } catch (e) {
      _logger.e('‚ùå Erreur v√©rification nouveau bulletin', error: e);
      return true; // Assume new if we can't check
    }
  }

  /// Stocke l'ID du dernier bulletin notifi√©.
  Future<void> _storeLastBulletinId(int studentId, int bulletinId) async {
    try {
      await secureStorage.write(
        key: 'lastBulletinId_$studentId',
        value: bulletinId.toString(),
      );
    } catch (e) {
      // Silently handle storage errors
    }
  }

  /// Affiche une notification pour un nouveau bulletin disponible.
  /// Inclut des informations sur le t√©l√©chargement si disponible.
  Future<void> showBulletinNotification(
    int studentId,
    ReportCard reportCard, [
    String? downloadPath,
  ]) async {
    try {
      final studentName = await getStudentName(studentId);
      final title = 'Nouveau bulletin disponible';

      String body;
      if (downloadPath != null) {
        body =
            'Le bulletin de $studentName a √©t√© t√©l√©charg√© (Note: ${reportCard.averageGrade ?? 'N/A'}).';
      } else {
        body =
            'Le bulletin de $studentName est disponible (Note: ${reportCard.averageGrade ?? 'N/A'}).';
      }

      _logger.i('üîî Affichage notification: $title - $body');

      await notifications.show(
        reportCard.id!,
        title,
        body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            channelId,
            channelName,
            importance: Importance.high,
            priority: Priority.high,
            playSound: true,
            enableVibration: true,
            showWhen: true,
            when: DateTime.now().millisecondsSinceEpoch,
          ),
        ),
      );

      _logger.i('‚úÖ Notification envoy√©e avec succ√®s');
    } catch (e, stackTrace) {
      _logger.e(
        '‚ùå Erreur affichage notification',
        error: e,
        stackTrace: stackTrace,
      );
    }
  }

  /// Effectue le polling p√©riodique avec log de d√©marrage.
  void startPolling() {
    stopPolling();
    _logger.i(
      'üöÄ D√©marrage du polling automatique (intervalle: ${_pollInterval.inMinutes} min)',
    );

    // Effectue un premier polling imm√©diat
    poll();

    // Puis d√©marre le timer p√©riodique
    _timer = Timer.periodic(_pollInterval, (_) {
      _logger.d('‚è∞ D√©clenchement polling p√©riodique');
      poll();
    });
  }

  /// Arr√™te le polling avec log.
  void stopPolling() {
    if (_timer != null) {
      _timer!.cancel();
      _timer = null;
      _logger.i('‚èπÔ∏è Polling arr√™t√©');
    }
  }

  /// Nettoie les ressources utilis√©es par le service.
  void dispose() {
    stopPolling();
  }

  /// Effectue un polling imm√©diat (pour forcer une v√©rification).
  Future<void> pollNow() async {
    _logger.i('üîÑ Polling manuel d√©clench√©');
    await poll();
  }

  /// Active le mode debug avec polling fr√©quent (30 secondes).
  void enableDebugMode() {
    stopPolling();
    _logger.w('üêõ Mode DEBUG activ√© - Polling toutes les 30 secondes');

    poll(); // Premier polling imm√©diat

    _timer = Timer.periodic(const Duration(seconds: 30), (_) {
      _logger.d('üêõ DEBUG: Polling fr√©quent');
      poll();
    });
  }

  /// R√©cup√®re la liste des bulletins t√©l√©charg√©s localement.
  Future<List<File>> getDownloadedBulletins() async {
    try {
      final bulletinsDir = await getBulletinsDirectory();
      final files = bulletinsDir
          .listSync()
          .whereType<File>()
          .where((file) => file.path.endsWith('.pdf'))
          .toList();

      // Trie par date de modification (plus r√©cent en premier)
      files.sort((a, b) {
        final aStat = a.statSync();
        final bStat = b.statSync();
        return bStat.modified.compareTo(aStat.modified);
      });

      return files;
    } catch (e) {
      return [];
    }
  }

  /// Supprime les anciens bulletins t√©l√©charg√©s pour lib√©rer de l'espace.
  /// Garde les [keepCount] plus r√©cents fichiers.
  Future<void> cleanupOldBulletins({int keepCount = 10}) async {
    try {
      final files = await getDownloadedBulletins();

      if (files.length > keepCount) {
        final filesToDelete = files.skip(keepCount);

        for (final file in filesToDelete) {
          await file.delete();
        }
      }
    } catch (e) {
      // Silently handle cleanup errors
    }
  }

  /// Force un bulletin √† √™tre trait√© comme nouveau (pour debug).
  /// Supprime l'ID du dernier bulletin stock√© pour forcer la re-notification.
  Future<void> resetBulletinStatus(int studentId) async {
    try {
      await secureStorage.delete(key: 'lastBulletinId_$studentId');
      _logger.i('üîÑ Statut bulletin r√©initialis√© pour l\'√©tudiant $studentId');
    } catch (e) {
      _logger.e('‚ùå Erreur r√©initialisation statut bulletin', error: e);
    }
  }

  /// Force un nouveau polling et traite tous les bulletins comme nouveaux.
  Future<void> forceRefreshBulletins() async {
    try {
      _logger.i('üîÑ For√ßage du rafra√Æchissement des bulletins...');
      final studentIds = await getLinkedStudentIds();

      for (final studentId in studentIds) {
        await resetBulletinStatus(studentId);
      }

      await poll();
      _logger.i('‚úÖ Rafra√Æchissement forc√© termin√©');
    } catch (e, stackTrace) {
      _logger.e(
        '‚ùå Erreur lors du rafra√Æchissement forc√©',
        error: e,
        stackTrace: stackTrace,
      );
    }
  }
}
